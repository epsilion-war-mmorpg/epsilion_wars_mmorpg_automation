"""Application settings."""
import os
from typing import Literal

from pydantic import BaseSettings, Field


class AppSettings(BaseSettings):
    """Application settings class."""

    # required customer settings
    telegram_api_id: int = 123456
    telegram_api_hash: str = 'u_api_hash_here'

    # optional customer settings
    minimum_hp_level_for_grinding: int = Field(default=95, ge=1, le=100)
    notifications_enabled: bool = False
    favorites_enabled: bool = True
    auto_healing_enabled: bool = True
    stop_if_equip_broken: bool = True
    stop_if_captcha_fire: bool = False
    captcha_solver_enabled: bool = True

    select_combo_strategy: Literal['simple', 'random', 'random-or-skip', 'disabled', 'tuned', 'priority'] = 'simple'
    skip_combo_chance: int = Field(default=30, description='Chance to skip combo bite if `random-or-skip` strategy selected')

    skip_random_vendor: bool = True
    skip_random_vendor_stop_words: str = '–°–≤–∏—Ç–æ–∫ –ö—Å–µ–ª–µ—Å–∞,–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–≤–∏—Ç–æ–∫ –∑–∞—Ç–æ—á–∫–∏ [IV]'
    use_backup_game_bot: bool = False
    equip_farming_number: int = 1
    equip_travel_number: int = 2
    repair_locations_path: str = ''
    custom_channel_for_inventory: str = ''

    # advanced customer settings
    anti_captcha_com_apikey: str = Field(default='', description='see https://anti-captcha.com for more information')
    anti_captcha_com_timeout: int = 15
    anti_captcha_com_create_task_tries: int = 3
    anti_captcha_com_create_task_throttling: int = 15
    anti_captcha_com_get_task_tries: int = 20
    anti_captcha_com_get_task_throttling: int = 5
    healing_timeout: int = Field(
        default=20,
        description='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –∑–µ–ª–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.',
    )

    # developer section
    slow_mode: bool = Field(default=False, description='Used for fresh telegram accounts.')
    ping_commands: str = ',.-+=/0'
    game_username: str = 'EpsilionWarBot'
    game_username_backup: str = 'EpsilionRBRbot'
    tlg_client_retries: int = 30
    tlg_client_retry_delay: int = 15
    trainer_name: str = 'Epsilion Trainer'
    trainer_public_link: str = 'https://teletype.in/@esemiko/epsilion-trainer'
    debug: bool = Field(default=False)
    message_log_limit: int = 100
    hp_level_for_low_heal_pot: int = Field(default=75, ge=1, le=100)
    hp_level_for_mid_heal_pot: int = Field(default=50, ge=1, le=100)
    rod_minimal_hp_level_for_fishing: int = Field(default=3, ge=1)
    bow_minimal_hp_level_for_hunting: int = Field(default=8, ge=1)
    equip_minimal_hp_level_for_repairing: int = Field(default=1, ge=1)
    character_middle_level_threshold: int = 10
    character_high_level_threshold: int = 20
    character_top_level_threshold: int = 30
    wait_loop_iteration_seconds: int = 3
    show_stats_every_seconds: int = 30 * 60
    check_rewards_every_seconds: int = 4 * 60 * 60
    check_fishing_every_seconds_min: int = int(2.95 * 60 * 60)
    check_fishing_every_seconds_max: int = int(5.01 * 60 * 60)
    check_hunting_every_seconds_min: int = int(5.95 * 60 * 60)
    check_hunting_every_seconds_max: int = int(9.01 * 60 * 60)
    desktop_notification_timeout: int = 10
    repairman_locations: list[str] = [
        '–ö–∞–≤–µ–ª–ª–∞',
        '–î—Ä–∞–Ω–≥',
        '–ê–∫–≤–µ–ª–∏—è',
        '–¶–∏—Ä—Ç–∞',
        '–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã',
        '–°–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç',
        '–õ–æ–Ω–≥–π–∏—Ä',
        '–ö–∞—Ä–±–∞—Ä–∞–∫',
        '–û–∞–∑–∏—Å',
        '–ü–æ—Å–µ–ª–µ–Ω–∏–µ –¢—Ä–æ–≥–ª–æ–¥–∏—Ç–æ–≤',
    ]
    repairman_names: set[str] = {
        '‚öí –ö—É–∑–Ω–µ—Ü –≠—Ä–∏–∫',
        '‚öí –ö—É–∑–Ω–µ—Ü –ì—Ä—ã–ª',
        '‚öí –ö—É–∑–Ω–µ—Ü –ì–µ–π–ª',
        '‚öí –ö—É–∑–Ω–µ—Ü –•—ç–Ω–∫',
        '‚öí –ö—É–∑–Ω–µ—Ü –ê–∞–∫–º–∞–∞–Ω',
        '‚öí –ö—É–∑–Ω–µ—Ü –§–ª—ç—Ç',
        '‚öí –ú–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏ –≠–≥–µ—Ä—å',
        '‚öí –ö—É–∑–Ω–µ—Ü –ö–∞—Ä–±–æ',
        '‚öí –ö—É–∑–Ω–µ—Ü –û–∞–∑–∏—Å',
        '‚öí –ö—É–∑–Ω–µ—Ü –ì–æ—Ä–¥',
    }
    combo_lock_config: dict[str, int] = {
        '–ê—Ç–∞–∫—É—é—â–∞—è –≤–æ–ª–Ω–∞ I(üó°1ü•ä1)': 3,
        '–û–±—Ä—è–¥ –æ–∫–æ–≤ I(ü•ä1üå¨1)': 2,
    }
    combo_heal_hp: dict[str, int] = {
        '–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞ I(üó°1ü•ä1)': 450,
        'üçû –ö–æ—Ä–∫–∞ —Ö–ª–µ–±–∞ [II]': 75,
        'ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥ [III]': 200,
        'ü•Æ –ü–∏—Ä–æ–≥ [IV]': 300,
    }
    combo_priority: dict[str, int] = {
        # '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ —Ü–µ–ª–∏–∫–æ–º': –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ - —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞ (2üó°; 3üõ°)': 2,
        '–ü–æ –Ω–∞–∏—Ç–∏—é (3 ü•ä)': 1,
    }


app_settings = AppSettings(
    _env_file=os.path.join(os.path.dirname(__file__), '..', '.env'),
)

game_bot_name = app_settings.game_username_backup if app_settings.use_backup_game_bot else app_settings.game_username
